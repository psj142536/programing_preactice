#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>
int move_time = 0;

int move_X[100] = { 0, };
int move_Y[100] = { 0, };

int move_X_fast[100] = { 0, };
int move_Y_fast[100] = { 0, };

int time = 0;

char map[6][6] =
{
	{ '1', '1', '1', '1', '1', '1' },
	{ '0', '0', '1', '0', '0', '1' },
	{ '1', '0', '0', '0', '1', '1' },
	{ '1', '0', '1', '0', '1', '1' },
	{ '1', '0', '1', '0', '0', 'x' },
	{ '1', '1', '1', '1', '1', '1' },
};

char map_copy[6][6] =
{
	{ '1', '1', '1', '1', '1', '1' },
	{ '0', '0', '1', '0', '0', '1' },
	{ '1', '0', '0', '0', '1', '1' },
	{ '1', '0', '1', '0', '1', '1' },
	{ '1', '0', '1', '0', '0', 'x' },
	{ '1', '1', '1', '1', '1', '1' },
};

//주변에 도착 지점이 있는지 없는지 탐색
int check_x(int x, int y)
{
	if (x != 0)
		if (map[y][x - 1] == 'x')
			return 1;

	if (map[y][x + 1] == 'x')
		return 1;

	if (y != 0)
		if (map[y - 1][x] == 'x')
			return 1;

	if (map[y + 1][x] == 'x')
		return 1;

	return 0;
}

//주변에 경로가 여러개인지 탐색
int chance(int x, int y)
{
	int sum = 0;
	if (x != 0)
		if (map[y][x - 1] == '0')
			sum++;
	if (map[y][x + 1] == '0')
		sum++;
	if (y != 0)
		if (map[y - 1][x] == '0')
			sum++;
	if (map[y + 1][x] == '0')
		sum++;
	return sum;
}

//경로탐색 함수
int searching(int x, int y)
{
	int x_copy = 0;
	int y_copy = 0;
	map[y][x] = '2';
	while (1)
	{
		move_X[move_time] = x;
		move_Y[move_time] = y;
		move_time++;

		move_X_fast[time] = x;
		move_Y_fast[time] = y;
		time++;

		if (check_x(x, y) == 1)
			break;

		if (chance(x, y) >= 2)
		{
			map[y][x] = '2';
			y_copy = y;
			x_copy = x;
			if (map[y - 1][x] == '0')
			{
				map[y - 1][x] = '2';
				y_copy--;
			}

			else if (map[y + 1][x] == '0')
			{
				map[y + 1][x] = '2';
				y_copy++;
			}

			else if (map[y][x - 1] == '0')
			{
				map[y][x - 1] = '2';
				x_copy--;
			}

			else if (map[y][x + 1] == '0')
			{
				map[y][x + 1] = '2';
				x_copy++;
			}
			int time_copy = time;
			searching(x_copy, y_copy);
			for (int i = time_copy; i < time; i++)
			{
				move_X_fast[i] = 0;
				move_Y_fast[i] = 0;
			}
			time = time_copy - 1;

		}

		else
		{
			if (map[y - 1][x] == '0')
			{
				map[y - 1][x] = '2';
				y--;
			}

			else if (map[y + 1][x] == '0')
			{
				map[y + 1][x] = '2';
				y++;
			}

			else if (map[y][x - 1] == '0')
			{
				map[y][x - 1] = '2';
				x--;
			}

			else if (map[y][x + 1] == '0')
			{
				map[y][x + 1] = '2';
				x++;
			}

			else
			{
				break;
			}
		}
	}
	return 0;
}

int main()
{
	int start_x = 0;
	int start_y = 0;

	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
			printf(" %c", map[i][j]);
		printf("\n");
	}

	while (1)
	{
		printf("x축을 입력하세요(0부터 시작) : ");
		scanf("%d", &start_x);
		printf("y축을 입력하세요(0부터 시작) : ");
		scanf("%d", &start_y);
		if (map[start_y][start_x] == '0' && start_x == 0)
		{
			printf("프로그램을 시작합니다.\n");
			break;
		}
		printf("0이고 x가 1인 지점으로 다시 입력해주세요\n");
	}

	searching(start_x, start_y);
	printf("5초 후 결과가 나옵니다.");
	Sleep(5000);
	system("cls");
	printf("===================결과 출력===================\n");
	printf("2는 이동한 좌표입니다.\n");
	printf("  원본 미로         결과 미로     \n");
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
			printf(" %c", map_copy[i][j]);
		printf("       ");
		for (int j = 0; j < 6; j++)
			printf("%c ", map[i][j]);
		printf("\n");
	}
	printf("\n\n===============================================\n");
	printf("   좌표의 이동 순서표 \n\n");
	for (int i = 0; i < move_time; i++)
		printf("%2d 번째 이동 : (%d , %d)\n", i + 1, move_X[i], move_Y[i]);
	printf("\n\n===============================================\n");
	printf("   좌표의 최단 경로표 \n\n");
	for (int i = 0; i < time; i++)
		printf("%2d 번째 이동 : (%d , %d)\n", i + 1, move_X_fast[i], move_Y_fast[i]);
	return 0;
}
